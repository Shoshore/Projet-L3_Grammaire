
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'grammaireALTERNATIVE COLON EPSILON NEWLINE NON_TERMINAL TERMINALgrammaire : reglesregles : regle NEWLINE regles\n              | regleregle : NON_TERMINAL COLON productionsproductions : production productions\n                   | productionproduction : TERMINAL\n                  | NON_TERMINAL\n                  | EPSILON\n                  | TERMINAL production\n                  | NON_TERMINAL production'
    
_lr_action_items = {'NON_TERMINAL':([0,5,6,8,10,11,12,13,15,],[4,4,8,8,8,8,-9,-11,-10,]),'$end':([1,2,3,7,8,9,10,11,12,13,14,15,],[0,-1,-3,-2,-8,-4,-6,-7,-9,-11,-5,-10,]),'NEWLINE':([3,8,9,10,11,12,13,14,15,],[5,-8,-4,-6,-7,-9,-11,-5,-10,]),'COLON':([4,],[6,]),'TERMINAL':([6,8,10,11,12,13,15,],[11,11,11,11,-9,-11,-10,]),'EPSILON':([6,8,10,11,12,13,15,],[12,12,12,12,-9,-11,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'grammaire':([0,],[1,]),'regles':([0,5,],[2,7,]),'regle':([0,5,],[3,3,]),'productions':([6,10,],[9,14,]),'production':([6,8,10,11,],[10,13,10,15,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> grammaire","S'",1,None,None,None),
  ('grammaire -> regles','grammaire',1,'p_grammaire','parser_yacc.py',21),
  ('regles -> regle NEWLINE regles','regles',3,'p_regles','parser_yacc.py',26),
  ('regles -> regle','regles',1,'p_regles','parser_yacc.py',27),
  ('regle -> NON_TERMINAL COLON productions','regle',3,'p_regle','parser_yacc.py',36),
  ('productions -> production productions','productions',2,'p_productions','parser_yacc.py',41),
  ('productions -> production','productions',1,'p_productions','parser_yacc.py',42),
  ('production -> TERMINAL','production',1,'p_production','parser_yacc.py',47),
  ('production -> NON_TERMINAL','production',1,'p_production','parser_yacc.py',48),
  ('production -> EPSILON','production',1,'p_production','parser_yacc.py',49),
  ('production -> TERMINAL production','production',2,'p_production','parser_yacc.py',50),
  ('production -> NON_TERMINAL production','production',2,'p_production','parser_yacc.py',51),
]
